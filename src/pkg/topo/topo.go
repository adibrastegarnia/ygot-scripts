/*
Package topo is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/adib/ygot-scripts/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- yang/ietf-network.yang
	- yang/ietf-network-topology.yang
Imported modules were sourced from:
	- yang/...
*/
package topo

import (
	"encoding/json"
	"fmt"
	"reflect"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Topology{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// ΓModelData contains the catalogue information corresponding to the modules for
// which Go code was generated.
var ΓModelData = []*gpb.ModelData{
	{
		Name:         "ietf-inet-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
	{
		Name:         "ietf-network",
		Organization: "IETF I2RS (Interface to the Routing System) Working Group",
	},
	{
		Name:         "ietf-network-topology",
		Organization: "IETF I2RS (Interface to the Routing System) Working Group",
	},
}

// IETFNetwork_Networks represents the /ietf-network/networks YANG schema element.
type IETFNetwork_Networks struct {
	Network map[string]*IETFNetwork_Networks_Network `path:"network" module:"ietf-network"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks) IsYANGGoStruct() {}

// NewNetwork creates a new entry in the Network list of the
// IETFNetwork_Networks struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks) NewNetwork(NetworkId string) (*IETFNetwork_Networks_Network, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*IETFNetwork_Networks_Network)
	}

	key := NetworkId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Network[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Network", key)
	}

	t.Network[key] = &IETFNetwork_Networks_Network{
		NetworkId: &NetworkId,
	}

	return t.Network[key], nil
}

// GetOrCreateNetwork retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks) GetOrCreateNetwork(NetworkId string) *IETFNetwork_Networks_Network {

	key := NetworkId

	if v, ok := t.Network[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetwork(NetworkId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetwork got unexpected error: %v", err))
	}
	return v
}

// GetNetwork retrieves the value with the specified key from
// the Network map field of IETFNetwork_Networks. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks) GetNetwork(NetworkId string) *IETFNetwork_Networks_Network {

	if t == nil {
		return nil
	}

	key := NetworkId

	if lm, ok := t.Network[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetwork deletes the value with the specified keys from
// the receiver IETFNetwork_Networks. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks) DeleteNetwork(NetworkId string) {
	key := NetworkId

	delete(t.Network, key)
}

// AppendNetwork appends the supplied IETFNetwork_Networks_Network struct to the
// list Network of IETFNetwork_Networks. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks) AppendNetwork(v *IETFNetwork_Networks_Network) error {
	key := *v.NetworkId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*IETFNetwork_Networks_Network)
	}

	if _, ok := t.Network[key]; ok {
		return fmt.Errorf("duplicate key for list Network %v", key)
	}

	t.Network[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IETFNetwork_Networks_Network represents the /ietf-network/networks/network YANG schema element.
type IETFNetwork_Networks_Network struct {
	Link              map[string]*IETFNetwork_Networks_Network_Link              `path:"link" module:"ietf-network-topology"`
	NetworkId         *string                                                    `path:"network-id" module:"ietf-network"`
	NetworkTypes      *IETFNetwork_Networks_Network_NetworkTypes                 `path:"network-types" module:"ietf-network"`
	Node              map[string]*IETFNetwork_Networks_Network_Node              `path:"node" module:"ietf-network"`
	SupportingNetwork map[string]*IETFNetwork_Networks_Network_SupportingNetwork `path:"supporting-network" module:"ietf-network"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network) IsYANGGoStruct() {}

// NewLink creates a new entry in the Link list of the
// IETFNetwork_Networks_Network struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network) NewLink(LinkId string) (*IETFNetwork_Networks_Network_Link, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*IETFNetwork_Networks_Network_Link)
	}

	key := LinkId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Link[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Link", key)
	}

	t.Link[key] = &IETFNetwork_Networks_Network_Link{
		LinkId: &LinkId,
	}

	return t.Link[key], nil
}

// GetOrCreateLink retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network) GetOrCreateLink(LinkId string) *IETFNetwork_Networks_Network_Link {

	key := LinkId

	if v, ok := t.Link[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLink(LinkId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLink got unexpected error: %v", err))
	}
	return v
}

// GetLink retrieves the value with the specified key from
// the Link map field of IETFNetwork_Networks_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network) GetLink(LinkId string) *IETFNetwork_Networks_Network_Link {

	if t == nil {
		return nil
	}

	key := LinkId

	if lm, ok := t.Link[key]; ok {
		return lm
	}
	return nil
}

// DeleteLink deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network) DeleteLink(LinkId string) {
	key := LinkId

	delete(t.Link, key)
}

// AppendLink appends the supplied IETFNetwork_Networks_Network_Link struct to the
// list Link of IETFNetwork_Networks_Network. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Link already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network) AppendLink(v *IETFNetwork_Networks_Network_Link) error {
	key := *v.LinkId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*IETFNetwork_Networks_Network_Link)
	}

	if _, ok := t.Link[key]; ok {
		return fmt.Errorf("duplicate key for list Link %v", key)
	}

	t.Link[key] = v
	return nil
}

// NewNode creates a new entry in the Node list of the
// IETFNetwork_Networks_Network struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network) NewNode(NodeId string) (*IETFNetwork_Networks_Network_Node, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*IETFNetwork_Networks_Network_Node)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &IETFNetwork_Networks_Network_Node{
		NodeId: &NodeId,
	}

	return t.Node[key], nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network) GetOrCreateNode(NodeId string) *IETFNetwork_Networks_Network_Node {

	key := NodeId

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of IETFNetwork_Networks_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network) GetNode(NodeId string) *IETFNetwork_Networks_Network_Node {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.Node[key]; ok {
		return lm
	}
	return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network) DeleteNode(NodeId string) {
	key := NodeId

	delete(t.Node, key)
}

// AppendNode appends the supplied IETFNetwork_Networks_Network_Node struct to the
// list Node of IETFNetwork_Networks_Network. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Node already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network) AppendNode(v *IETFNetwork_Networks_Network_Node) error {
	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*IETFNetwork_Networks_Network_Node)
	}

	if _, ok := t.Node[key]; ok {
		return fmt.Errorf("duplicate key for list Node %v", key)
	}

	t.Node[key] = v
	return nil
}

// NewSupportingNetwork creates a new entry in the SupportingNetwork list of the
// IETFNetwork_Networks_Network struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network) NewSupportingNetwork(NetworkRef string) (*IETFNetwork_Networks_Network_SupportingNetwork, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingNetwork == nil {
		t.SupportingNetwork = make(map[string]*IETFNetwork_Networks_Network_SupportingNetwork)
	}

	key := NetworkRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SupportingNetwork[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SupportingNetwork", key)
	}

	t.SupportingNetwork[key] = &IETFNetwork_Networks_Network_SupportingNetwork{
		NetworkRef: &NetworkRef,
	}

	return t.SupportingNetwork[key], nil
}

// GetOrCreateSupportingNetwork retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network) GetOrCreateSupportingNetwork(NetworkRef string) *IETFNetwork_Networks_Network_SupportingNetwork {

	key := NetworkRef

	if v, ok := t.SupportingNetwork[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSupportingNetwork(NetworkRef)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSupportingNetwork got unexpected error: %v", err))
	}
	return v
}

// GetSupportingNetwork retrieves the value with the specified key from
// the SupportingNetwork map field of IETFNetwork_Networks_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network) GetSupportingNetwork(NetworkRef string) *IETFNetwork_Networks_Network_SupportingNetwork {

	if t == nil {
		return nil
	}

	key := NetworkRef

	if lm, ok := t.SupportingNetwork[key]; ok {
		return lm
	}
	return nil
}

// DeleteSupportingNetwork deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network) DeleteSupportingNetwork(NetworkRef string) {
	key := NetworkRef

	delete(t.SupportingNetwork, key)
}

// AppendSupportingNetwork appends the supplied IETFNetwork_Networks_Network_SupportingNetwork struct to the
// list SupportingNetwork of IETFNetwork_Networks_Network. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_SupportingNetwork already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network) AppendSupportingNetwork(v *IETFNetwork_Networks_Network_SupportingNetwork) error {
	key := *v.NetworkRef

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingNetwork == nil {
		t.SupportingNetwork = make(map[string]*IETFNetwork_Networks_Network_SupportingNetwork)
	}

	if _, ok := t.SupportingNetwork[key]; ok {
		return fmt.Errorf("duplicate key for list SupportingNetwork %v", key)
	}

	t.SupportingNetwork[key] = v
	return nil
}

// GetOrCreateNetworkTypes retrieves the value of the NetworkTypes field
// or returns the existing field if it already exists.
func (t *IETFNetwork_Networks_Network) GetOrCreateNetworkTypes() *IETFNetwork_Networks_Network_NetworkTypes {
	if t.NetworkTypes != nil {
		return t.NetworkTypes
	}
	t.NetworkTypes = &IETFNetwork_Networks_Network_NetworkTypes{}
	return t.NetworkTypes
}

// GetNetworkTypes returns the value of the NetworkTypes struct pointer
// from IETFNetwork_Networks_Network. If the receiver or the field NetworkTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IETFNetwork_Networks_Network) GetNetworkTypes() *IETFNetwork_Networks_Network_NetworkTypes {
	if t != nil && t.NetworkTypes != nil {
		return t.NetworkTypes
	}
	return nil
}

// GetNetworkId retrieves the value of the leaf NetworkId from the IETFNetwork_Networks_Network
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NetworkId is set, it can safely use t.GetNetworkId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NetworkId == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network) GetNetworkId() string {
	if t == nil || t.NetworkId == nil {
		return ""
	}
	return *t.NetworkId
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkId == nil {
		return nil, fmt.Errorf("nil value for key NetworkId")
	}

	return map[string]interface{}{
		"network-id": *t.NetworkId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IETFNetwork_Networks_Network_Link represents the /ietf-network/networks/network/link YANG schema element.
type IETFNetwork_Networks_Network_Link struct {
	Destination    *IETFNetwork_Networks_Network_Link_Destination                                                             `path:"destination" module:"ietf-network-topology"`
	LinkId         *string                                                                                                    `path:"link-id" module:"ietf-network-topology"`
	Source         *IETFNetwork_Networks_Network_Link_Source                                                                  `path:"source" module:"ietf-network-topology"`
	SupportingLink map[IETFNetwork_Networks_Network_Link_SupportingLink_Key]*IETFNetwork_Networks_Network_Link_SupportingLink `path:"supporting-link" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Link) IsYANGGoStruct() {}

// IETFNetwork_Networks_Network_Link_SupportingLink_Key represents the key for list SupportingLink of element /ietf-network/networks/network/link.
type IETFNetwork_Networks_Network_Link_SupportingLink_Key struct {
	NetworkRef string `path:"network-ref"`
	LinkRef    string `path:"link-ref"`
}

// NewSupportingLink creates a new entry in the SupportingLink list of the
// IETFNetwork_Networks_Network_Link struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network_Link) NewSupportingLink(NetworkRef string, LinkRef string) (*IETFNetwork_Networks_Network_Link_SupportingLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingLink == nil {
		t.SupportingLink = make(map[IETFNetwork_Networks_Network_Link_SupportingLink_Key]*IETFNetwork_Networks_Network_Link_SupportingLink)
	}

	key := IETFNetwork_Networks_Network_Link_SupportingLink_Key{
		NetworkRef: NetworkRef,
		LinkRef:    LinkRef,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SupportingLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SupportingLink", key)
	}

	t.SupportingLink[key] = &IETFNetwork_Networks_Network_Link_SupportingLink{
		NetworkRef: &NetworkRef,
		LinkRef:    &LinkRef,
	}

	return t.SupportingLink[key], nil
}

// GetOrCreateSupportingLink retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Link. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network_Link) GetOrCreateSupportingLink(NetworkRef string, LinkRef string) *IETFNetwork_Networks_Network_Link_SupportingLink {

	key := IETFNetwork_Networks_Network_Link_SupportingLink_Key{
		NetworkRef: NetworkRef,
		LinkRef:    LinkRef,
	}

	if v, ok := t.SupportingLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSupportingLink(NetworkRef, LinkRef)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSupportingLink got unexpected error: %v", err))
	}
	return v
}

// GetSupportingLink retrieves the value with the specified key from
// the SupportingLink map field of IETFNetwork_Networks_Network_Link. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network_Link) GetSupportingLink(NetworkRef string, LinkRef string) *IETFNetwork_Networks_Network_Link_SupportingLink {

	if t == nil {
		return nil
	}

	key := IETFNetwork_Networks_Network_Link_SupportingLink_Key{
		NetworkRef: NetworkRef,
		LinkRef:    LinkRef,
	}

	if lm, ok := t.SupportingLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteSupportingLink deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Link. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network_Link) DeleteSupportingLink(NetworkRef string, LinkRef string) {
	key := IETFNetwork_Networks_Network_Link_SupportingLink_Key{
		NetworkRef: NetworkRef,
		LinkRef:    LinkRef,
	}

	delete(t.SupportingLink, key)
}

// AppendSupportingLink appends the supplied IETFNetwork_Networks_Network_Link_SupportingLink struct to the
// list SupportingLink of IETFNetwork_Networks_Network_Link. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Link_SupportingLink already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network_Link) AppendSupportingLink(v *IETFNetwork_Networks_Network_Link_SupportingLink) error {
	key := IETFNetwork_Networks_Network_Link_SupportingLink_Key{NetworkRef: *v.NetworkRef, LinkRef: *v.LinkRef}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingLink == nil {
		t.SupportingLink = make(map[IETFNetwork_Networks_Network_Link_SupportingLink_Key]*IETFNetwork_Networks_Network_Link_SupportingLink)
	}

	if _, ok := t.SupportingLink[key]; ok {
		return fmt.Errorf("duplicate key for list SupportingLink %v", key)
	}

	t.SupportingLink[key] = v
	return nil
}

// GetOrCreateDestination retrieves the value of the Destination field
// or returns the existing field if it already exists.
func (t *IETFNetwork_Networks_Network_Link) GetOrCreateDestination() *IETFNetwork_Networks_Network_Link_Destination {
	if t.Destination != nil {
		return t.Destination
	}
	t.Destination = &IETFNetwork_Networks_Network_Link_Destination{}
	return t.Destination
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *IETFNetwork_Networks_Network_Link) GetOrCreateSource() *IETFNetwork_Networks_Network_Link_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &IETFNetwork_Networks_Network_Link_Source{}
	return t.Source
}

// GetDestination returns the value of the Destination struct pointer
// from IETFNetwork_Networks_Network_Link. If the receiver or the field Destination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IETFNetwork_Networks_Network_Link) GetDestination() *IETFNetwork_Networks_Network_Link_Destination {
	if t != nil && t.Destination != nil {
		return t.Destination
	}
	return nil
}

// GetSource returns the value of the Source struct pointer
// from IETFNetwork_Networks_Network_Link. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IETFNetwork_Networks_Network_Link) GetSource() *IETFNetwork_Networks_Network_Link_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// GetLinkId retrieves the value of the leaf LinkId from the IETFNetwork_Networks_Network_Link
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkId is set, it can safely use t.GetLinkId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkId == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link) GetLinkId() string {
	if t == nil || t.LinkId == nil {
		return ""
	}
	return *t.LinkId
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Link struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Link) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkId == nil {
		return nil, fmt.Errorf("nil value for key LinkId")
	}

	return map[string]interface{}{
		"link-id": *t.LinkId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Link) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Link_Destination represents the /ietf-network/networks/network/link/destination YANG schema element.
type IETFNetwork_Networks_Network_Link_Destination struct {
	DestNode *string `path:"dest-node" module:"ietf-network-topology"`
	DestTp   *string `path:"dest-tp" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Link_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Link_Destination) IsYANGGoStruct() {}

// GetDestNode retrieves the value of the leaf DestNode from the IETFNetwork_Networks_Network_Link_Destination
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DestNode is set, it can safely use t.GetDestNode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DestNode == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_Destination) GetDestNode() string {
	if t == nil || t.DestNode == nil {
		return ""
	}
	return *t.DestNode
}

// GetDestTp retrieves the value of the leaf DestTp from the IETFNetwork_Networks_Network_Link_Destination
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DestTp is set, it can safely use t.GetDestTp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DestTp == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_Destination) GetDestTp() string {
	if t == nil || t.DestTp == nil {
		return ""
	}
	return *t.DestTp
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Link_Destination) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Link_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Link_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Link_Source represents the /ietf-network/networks/network/link/source YANG schema element.
type IETFNetwork_Networks_Network_Link_Source struct {
	SourceNode *string `path:"source-node" module:"ietf-network-topology"`
	SourceTp   *string `path:"source-tp" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Link_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Link_Source) IsYANGGoStruct() {}

// GetSourceNode retrieves the value of the leaf SourceNode from the IETFNetwork_Networks_Network_Link_Source
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceNode is set, it can safely use t.GetSourceNode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceNode == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_Source) GetSourceNode() string {
	if t == nil || t.SourceNode == nil {
		return ""
	}
	return *t.SourceNode
}

// GetSourceTp retrieves the value of the leaf SourceTp from the IETFNetwork_Networks_Network_Link_Source
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceTp is set, it can safely use t.GetSourceTp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceTp == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_Source) GetSourceTp() string {
	if t == nil || t.SourceTp == nil {
		return ""
	}
	return *t.SourceTp
}

// SetSourceTp sets the value of the leaf SourceTp from the IETFNetwork_Networks_Network_Link_Source
// struct.
func (t *IETFNetwork_Networks_Network_Link_Source) SetSourceTp(val string) bool {
	if val == "" {
		return false
	}
	t.SourceTp = ygot.String(val)
	return true
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Link_Source) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Link_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Link_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Link_SupportingLink represents the /ietf-network/networks/network/link/supporting-link YANG schema element.
type IETFNetwork_Networks_Network_Link_SupportingLink struct {
	LinkRef    *string `path:"link-ref" module:"ietf-network-topology"`
	NetworkRef *string `path:"network-ref" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Link_SupportingLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Link_SupportingLink) IsYANGGoStruct() {}

// GetLinkRef retrieves the value of the leaf LinkRef from the IETFNetwork_Networks_Network_Link_SupportingLink
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkRef is set, it can safely use t.GetLinkRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_SupportingLink) GetLinkRef() string {
	if t == nil || t.LinkRef == nil {
		return ""
	}
	return *t.LinkRef
}

// GetNetworkRef retrieves the value of the leaf NetworkRef from the IETFNetwork_Networks_Network_Link_SupportingLink
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NetworkRef is set, it can safely use t.GetNetworkRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NetworkRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Link_SupportingLink) GetNetworkRef() string {
	if t == nil || t.NetworkRef == nil {
		return ""
	}
	return *t.NetworkRef
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Link_SupportingLink struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Link_SupportingLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkRef == nil {
		return nil, fmt.Errorf("nil value for key LinkRef")
	}

	if t.NetworkRef == nil {
		return nil, fmt.Errorf("nil value for key NetworkRef")
	}

	return map[string]interface{}{
		"link-ref":    *t.LinkRef,
		"network-ref": *t.NetworkRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Link_SupportingLink) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Link_SupportingLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Link_SupportingLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_NetworkTypes represents the /ietf-network/networks/network/network-types YANG schema element.
type IETFNetwork_Networks_Network_NetworkTypes struct {
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_NetworkTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_NetworkTypes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_NetworkTypes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_NetworkTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_NetworkTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Node represents the /ietf-network/networks/network/node YANG schema element.
type IETFNetwork_Networks_Network_Node struct {
	NodeId           *string                                                                                                    `path:"node-id" module:"ietf-network"`
	SupportingNode   map[IETFNetwork_Networks_Network_Node_SupportingNode_Key]*IETFNetwork_Networks_Network_Node_SupportingNode `path:"supporting-node" module:"ietf-network"`
	TerminationPoint map[string]*IETFNetwork_Networks_Network_Node_TerminationPoint                                             `path:"termination-point" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Node) IsYANGGoStruct() {}

// IETFNetwork_Networks_Network_Node_SupportingNode_Key represents the key for list SupportingNode of element /ietf-network/networks/network/node.
type IETFNetwork_Networks_Network_Node_SupportingNode_Key struct {
	NetworkRef string `path:"network-ref"`
	NodeRef    string `path:"node-ref"`
}

// NewSupportingNode creates a new entry in the SupportingNode list of the
// IETFNetwork_Networks_Network_Node struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network_Node) NewSupportingNode(NetworkRef string, NodeRef string) (*IETFNetwork_Networks_Network_Node_SupportingNode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingNode == nil {
		t.SupportingNode = make(map[IETFNetwork_Networks_Network_Node_SupportingNode_Key]*IETFNetwork_Networks_Network_Node_SupportingNode)
	}

	key := IETFNetwork_Networks_Network_Node_SupportingNode_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SupportingNode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SupportingNode", key)
	}

	t.SupportingNode[key] = &IETFNetwork_Networks_Network_Node_SupportingNode{
		NetworkRef: &NetworkRef,
		NodeRef:    &NodeRef,
	}

	return t.SupportingNode[key], nil
}

// GetOrCreateSupportingNode retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network_Node) GetOrCreateSupportingNode(NetworkRef string, NodeRef string) *IETFNetwork_Networks_Network_Node_SupportingNode {

	key := IETFNetwork_Networks_Network_Node_SupportingNode_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
	}

	if v, ok := t.SupportingNode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSupportingNode(NetworkRef, NodeRef)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSupportingNode got unexpected error: %v", err))
	}
	return v
}

// GetSupportingNode retrieves the value with the specified key from
// the SupportingNode map field of IETFNetwork_Networks_Network_Node. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network_Node) GetSupportingNode(NetworkRef string, NodeRef string) *IETFNetwork_Networks_Network_Node_SupportingNode {

	if t == nil {
		return nil
	}

	key := IETFNetwork_Networks_Network_Node_SupportingNode_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
	}

	if lm, ok := t.SupportingNode[key]; ok {
		return lm
	}
	return nil
}

// DeleteSupportingNode deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network_Node) DeleteSupportingNode(NetworkRef string, NodeRef string) {
	key := IETFNetwork_Networks_Network_Node_SupportingNode_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
	}

	delete(t.SupportingNode, key)
}

// AppendSupportingNode appends the supplied IETFNetwork_Networks_Network_Node_SupportingNode struct to the
// list SupportingNode of IETFNetwork_Networks_Network_Node. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Node_SupportingNode already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network_Node) AppendSupportingNode(v *IETFNetwork_Networks_Network_Node_SupportingNode) error {
	key := IETFNetwork_Networks_Network_Node_SupportingNode_Key{NetworkRef: *v.NetworkRef, NodeRef: *v.NodeRef}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingNode == nil {
		t.SupportingNode = make(map[IETFNetwork_Networks_Network_Node_SupportingNode_Key]*IETFNetwork_Networks_Network_Node_SupportingNode)
	}

	if _, ok := t.SupportingNode[key]; ok {
		return fmt.Errorf("duplicate key for list SupportingNode %v", key)
	}

	t.SupportingNode[key] = v
	return nil
}

// NewTerminationPoint creates a new entry in the TerminationPoint list of the
// IETFNetwork_Networks_Network_Node struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network_Node) NewTerminationPoint(TpId string) (*IETFNetwork_Networks_Network_Node_TerminationPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TerminationPoint == nil {
		t.TerminationPoint = make(map[string]*IETFNetwork_Networks_Network_Node_TerminationPoint)
	}

	key := TpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TerminationPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TerminationPoint", key)
	}

	t.TerminationPoint[key] = &IETFNetwork_Networks_Network_Node_TerminationPoint{
		TpId: &TpId,
	}

	return t.TerminationPoint[key], nil
}

// GetOrCreateTerminationPoint retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network_Node) GetOrCreateTerminationPoint(TpId string) *IETFNetwork_Networks_Network_Node_TerminationPoint {

	key := TpId

	if v, ok := t.TerminationPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerminationPoint(TpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerminationPoint got unexpected error: %v", err))
	}
	return v
}

// GetTerminationPoint retrieves the value with the specified key from
// the TerminationPoint map field of IETFNetwork_Networks_Network_Node. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network_Node) GetTerminationPoint(TpId string) *IETFNetwork_Networks_Network_Node_TerminationPoint {

	if t == nil {
		return nil
	}

	key := TpId

	if lm, ok := t.TerminationPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerminationPoint deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network_Node) DeleteTerminationPoint(TpId string) {
	key := TpId

	delete(t.TerminationPoint, key)
}

// AppendTerminationPoint appends the supplied IETFNetwork_Networks_Network_Node_TerminationPoint struct to the
// list TerminationPoint of IETFNetwork_Networks_Network_Node. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Node_TerminationPoint already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network_Node) AppendTerminationPoint(v *IETFNetwork_Networks_Network_Node_TerminationPoint) error {
	key := *v.TpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TerminationPoint == nil {
		t.TerminationPoint = make(map[string]*IETFNetwork_Networks_Network_Node_TerminationPoint)
	}

	if _, ok := t.TerminationPoint[key]; ok {
		return fmt.Errorf("duplicate key for list TerminationPoint %v", key)
	}

	t.TerminationPoint[key] = v
	return nil
}

// GetNodeId retrieves the value of the leaf NodeId from the IETFNetwork_Networks_Network_Node
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NodeId is set, it can safely use t.GetNodeId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NodeId == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node) GetNodeId() string {
	if t == nil || t.NodeId == nil {
		return ""
	}
	return *t.NodeId
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Node struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Node) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Node_SupportingNode represents the /ietf-network/networks/network/node/supporting-node YANG schema element.
type IETFNetwork_Networks_Network_Node_SupportingNode struct {
	NetworkRef *string `path:"network-ref" module:"ietf-network"`
	NodeRef    *string `path:"node-ref" module:"ietf-network"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Node_SupportingNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Node_SupportingNode) IsYANGGoStruct() {}

// GetNetworkRef retrieves the value of the leaf NetworkRef from the IETFNetwork_Networks_Network_Node_SupportingNode
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NetworkRef is set, it can safely use t.GetNetworkRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NetworkRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_SupportingNode) GetNetworkRef() string {
	if t == nil || t.NetworkRef == nil {
		return ""
	}
	return *t.NetworkRef
}

// GetNodeRef retrieves the value of the leaf NodeRef from the IETFNetwork_Networks_Network_Node_SupportingNode
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NodeRef is set, it can safely use t.GetNodeRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NodeRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_SupportingNode) GetNodeRef() string {
	if t == nil || t.NodeRef == nil {
		return ""
	}
	return *t.NodeRef
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Node_SupportingNode struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Node_SupportingNode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkRef == nil {
		return nil, fmt.Errorf("nil value for key NetworkRef")
	}

	if t.NodeRef == nil {
		return nil, fmt.Errorf("nil value for key NodeRef")
	}

	return map[string]interface{}{
		"network-ref": *t.NetworkRef,
		"node-ref":    *t.NodeRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Node_SupportingNode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Node_SupportingNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Node_SupportingNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Node_TerminationPoint represents the /ietf-network/networks/network/node/termination-point YANG schema element.
type IETFNetwork_Networks_Network_Node_TerminationPoint struct {
	SupportingTerminationPoint map[IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key]*IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint `path:"supporting-termination-point" module:"ietf-network-topology"`
	TpId                       *string                                                                                                                                                              `path:"tp-id" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Node_TerminationPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Node_TerminationPoint) IsYANGGoStruct() {}

// IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key represents the key for list SupportingTerminationPoint of element /ietf-network/networks/network/node/termination-point.
type IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key struct {
	NetworkRef string `path:"network-ref"`
	NodeRef    string `path:"node-ref"`
	TpRef      string `path:"tp-ref"`
}

// NewSupportingTerminationPoint creates a new entry in the SupportingTerminationPoint list of the
// IETFNetwork_Networks_Network_Node_TerminationPoint struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) NewSupportingTerminationPoint(NetworkRef string, NodeRef string, TpRef string) (*IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingTerminationPoint == nil {
		t.SupportingTerminationPoint = make(map[IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key]*IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint)
	}

	key := IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
		TpRef:      TpRef,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SupportingTerminationPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SupportingTerminationPoint", key)
	}

	t.SupportingTerminationPoint[key] = &IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint{
		NetworkRef: &NetworkRef,
		NodeRef:    &NodeRef,
		TpRef:      &TpRef,
	}

	return t.SupportingTerminationPoint[key], nil
}

// GetOrCreateSupportingTerminationPoint retrieves the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node_TerminationPoint. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) GetOrCreateSupportingTerminationPoint(NetworkRef string, NodeRef string, TpRef string) *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint {

	key := IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
		TpRef:      TpRef,
	}

	if v, ok := t.SupportingTerminationPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSupportingTerminationPoint(NetworkRef, NodeRef, TpRef)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSupportingTerminationPoint got unexpected error: %v", err))
	}
	return v
}

// GetSupportingTerminationPoint retrieves the value with the specified key from
// the SupportingTerminationPoint map field of IETFNetwork_Networks_Network_Node_TerminationPoint. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) GetSupportingTerminationPoint(NetworkRef string, NodeRef string, TpRef string) *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint {

	if t == nil {
		return nil
	}

	key := IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
		TpRef:      TpRef,
	}

	if lm, ok := t.SupportingTerminationPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteSupportingTerminationPoint deletes the value with the specified keys from
// the receiver IETFNetwork_Networks_Network_Node_TerminationPoint. If there is no such element, the function
// is a no-op.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) DeleteSupportingTerminationPoint(NetworkRef string, NodeRef string, TpRef string) {
	key := IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key{
		NetworkRef: NetworkRef,
		NodeRef:    NodeRef,
		TpRef:      TpRef,
	}

	delete(t.SupportingTerminationPoint, key)
}

// AppendSupportingTerminationPoint appends the supplied IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint struct to the
// list SupportingTerminationPoint of IETFNetwork_Networks_Network_Node_TerminationPoint. If the key value(s) specified in
// the supplied IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint already exist in the list, an error is
// returned.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) AppendSupportingTerminationPoint(v *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) error {
	key := IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key{NetworkRef: *v.NetworkRef, NodeRef: *v.NodeRef, TpRef: *v.TpRef}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupportingTerminationPoint == nil {
		t.SupportingTerminationPoint = make(map[IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint_Key]*IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint)
	}

	if _, ok := t.SupportingTerminationPoint[key]; ok {
		return fmt.Errorf("duplicate key for list SupportingTerminationPoint %v", key)
	}

	t.SupportingTerminationPoint[key] = v
	return nil
}

// GetTpId retrieves the value of the leaf TpId from the IETFNetwork_Networks_Network_Node_TerminationPoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TpId is set, it can safely use t.GetTpId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TpId == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) GetTpId() string {
	if t == nil || t.TpId == nil {
		return ""
	}
	return *t.TpId
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Node_TerminationPoint struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TpId == nil {
		return nil, fmt.Errorf("nil value for key TpId")
	}

	return map[string]interface{}{
		"tp-id": *t.TpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Node_TerminationPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint represents the /ietf-network/networks/network/node/termination-point/supporting-termination-point YANG schema element.
type IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint struct {
	NetworkRef *string `path:"network-ref" module:"ietf-network-topology"`
	NodeRef    *string `path:"node-ref" module:"ietf-network-topology"`
	TpRef      *string `path:"tp-ref" module:"ietf-network-topology"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) IsYANGGoStruct() {
}

// GetNetworkRef retrieves the value of the leaf NetworkRef from the IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NetworkRef is set, it can safely use t.GetNetworkRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NetworkRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) GetNetworkRef() string {
	if t == nil || t.NetworkRef == nil {
		return ""
	}
	return *t.NetworkRef
}

// GetNodeRef retrieves the value of the leaf NodeRef from the IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NodeRef is set, it can safely use t.GetNodeRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NodeRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) GetNodeRef() string {
	if t == nil || t.NodeRef == nil {
		return ""
	}
	return *t.NodeRef
}

// GetTpRef retrieves the value of the leaf TpRef from the IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TpRef is set, it can safely use t.GetTpRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TpRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) GetTpRef() string {
	if t == nil || t.TpRef == nil {
		return ""
	}
	return *t.TpRef
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkRef == nil {
		return nil, fmt.Errorf("nil value for key NetworkRef")
	}

	if t.NodeRef == nil {
		return nil, fmt.Errorf("nil value for key NodeRef")
	}

	if t.TpRef == nil {
		return nil, fmt.Errorf("nil value for key TpRef")
	}

	return map[string]interface{}{
		"network-ref": *t.NetworkRef,
		"node-ref":    *t.NodeRef,
		"tp-ref":      *t.TpRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_Node_TerminationPoint_SupportingTerminationPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFNetwork_Networks_Network_SupportingNetwork represents the /ietf-network/networks/network/supporting-network YANG schema element.
type IETFNetwork_Networks_Network_SupportingNetwork struct {
	NetworkRef *string `path:"network-ref" module:"ietf-network"`
}

// IsYANGGoStruct ensures that IETFNetwork_Networks_Network_SupportingNetwork implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetwork_Networks_Network_SupportingNetwork) IsYANGGoStruct() {}

// GetNetworkRef retrieves the value of the leaf NetworkRef from the IETFNetwork_Networks_Network_SupportingNetwork
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NetworkRef is set, it can safely use t.GetNetworkRef()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NetworkRef == nil'
// before retrieving the leaf's value.
func (t *IETFNetwork_Networks_Network_SupportingNetwork) GetNetworkRef() string {
	if t == nil || t.NetworkRef == nil {
		return ""
	}
	return *t.NetworkRef
}

// ΛListKeyMap returns the keys of the IETFNetwork_Networks_Network_SupportingNetwork struct, which is a YANG list entry.
func (t *IETFNetwork_Networks_Network_SupportingNetwork) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkRef == nil {
		return nil, fmt.Errorf("nil value for key NetworkRef")
	}

	return map[string]interface{}{
		"network-ref": *t.NetworkRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetwork_Networks_Network_SupportingNetwork) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetwork_Networks_Network_SupportingNetwork"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetwork_Networks_Network_SupportingNetwork) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Topology represents the /topology YANG schema element.
type Topology struct {
	Networks *IETFNetwork_Networks `path:"networks" module:"ietf-network"`
}

// IsYANGGoStruct ensures that Topology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Topology) IsYANGGoStruct() {}

// GetOrCreateNetworks retrieves the value of the Networks field
// or returns the existing field if it already exists.
func (t *Topology) GetOrCreateNetworks() *IETFNetwork_Networks {
	if t.Networks != nil {
		return t.Networks
	}
	t.Networks = &IETFNetwork_Networks{}
	return t.Networks
}

// GetNetworks returns the value of the Networks struct pointer
// from Topology. If the receiver or the field Networks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Topology) GetNetworks() *IETFNetwork_Networks {
	if t != nil && t.Networks != nil {
		return t.Networks
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Topology) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Topology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Topology) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x6f, 0xdb, 0xb8,
		0x12, 0x7e, 0xef, 0xaf, 0x18, 0xe8, 0xe5, 0xb4, 0x80, 0xe3, 0xe4, 0x3c, 0x9d, 0x83, 0x00, 0xfb,
		0xd0, 0xdd, 0xb4, 0xd8, 0xa2, 0x57, 0xec, 0xe6, 0xad, 0x0e, 0x0a, 0xd6, 0x1a, 0xc7, 0x44, 0x64,
		0x52, 0x20, 0xe9, 0xa8, 0xc6, 0x22, 0xff, 0x7d, 0x41, 0xdd, 0x6d, 0xd9, 0x11, 0x2f, 0x72, 0x2a,
		0x37, 0x04, 0x02, 0xc4, 0x96, 0xc5, 0xeb, 0x7c, 0x33, 0x9a, 0xf9, 0x66, 0x68, 0xff, 0xf3, 0x02,
		0x00, 0x20, 0xfa, 0x44, 0x56, 0x18, 0x5d, 0x42, 0xa4, 0x78, 0xca, 0x13, 0x7e, 0xbb, 0x89, 0x26,
		0xc5, 0xf5, 0xf7, 0x94, 0xc5, 0xd1, 0x25, 0xfc, 0xb7, 0x7c, 0xfb, 0x07, 0x67, 0x0b, 0x7a, 0x1b,
		0x5d, 0xc2, 0x45, 0x79, 0xe1, 0x8a, 0x8a, 0xe8, 0x12, 0x8a, 0x4e, 0xf2, 0x0b, 0x0c, 0x55, 0xc6,
		0xc5, 0x9d, 0xdc, 0xba, 0xba, 0x35, 0x44, 0x7d, 0xc7, 0x64, 0xfb, 0xf3, 0xed, 0xa1, 0xea, 0xcb,
		0xbb, 0x43, 0xd6, 0x1f, 0x7c, 0x11, 0xb8, 0xa0, 0x3f, 0x3a, 0xe3, 0x6c, 0x8f, 0x95, 0xed, 0x8c,
		0x92, 0x7f, 0xfa, 0x37, 0x5f, 0x8b, 0x39, 0xee, 0x6d, 0x59, 0xcc, 0x04, 0x37, 0x19, 0x17, 0x7a,
		0x32, 0x51, 0x5a, 0x0c, 0x32, 0xd9, 0x7f, 0xe3, 0x9f, 0x44, 0xbe, 0x16, 0xb7, 0xeb, 0x15, 0x32,
		0x15, 0x5d, 0x82, 0x12, 0x6b, 0x3c, 0x70, 0x63, 0xeb, 0x2e, 0x3d, 0xa7, 0xce, 0x4d, 0x0f, 0x5b,
		0x57, 0x1e, 0x76, 0x56, 0xba, 0xbb, 0xc9, 0xbb, 0x9b, 0x7d, 0x78, 0x25, 0x3b, 0x7b, 0x7e, 0x68,
		0x1d, 0xfb, 0xb7, 0xbe, 0x57, 0x04, 0x26, 0xa2, 0x30, 0x13, 0x89, 0xa9, 0x68, 0xac, 0x45, 0x64,
		0x2d, 0x2a, 0x63, 0x91, 0xed, 0x17, 0xdd, 0x01, 0x11, 0xf6, 0x8a, 0xb2, 0xbe, 0x21, 0xa1, 0xec,
		0xae, 0x7f, 0xf9, 0xd5, 0x66, 0xe6, 0x77, 0xf7, 0x2c, 0xe4, 0x71, 0xe1, 0x1a, 0x0b, 0xd9, 0x46,
		0xd8, 0x5d, 0xa1, 0xab, 0x9e, 0x59, 0xda, 0x08, 0xdf, 0x19, 0x04, 0xce, 0x60, 0xd8, 0x0f, 0x0a,
		0x15, 0xf5, 0x36, 0x7a, 0x78, 0xf4, 0x8e, 0x87, 0x9e, 0x9d, 0xee, 0x03, 0x4b, 0x7d, 0x63, 0x8c,
		0x52, 0x51, 0x46, 0x14, 0xe5, 0xcc, 0x7c, 0xf7, 0x2a, 0xd9, 0xb4, 0x1b, 0x1b, 0x6e, 0x83, 0x19,
		0xa4, 0xac, 0xa1, 0xe5, 0x02, 0x31, 0x37, 0xa8, 0xb9, 0x42, 0xce, 0x1b, 0x7a, 0xde, 0x10, 0x74,
		0x86, 0xa2, 0x19, 0x24, 0x0d, 0xa1, 0x69, 0x0d, 0xd1, 0x2d, 0xa8, 0x9e, 0x31, 0x1e, 0x3b, 0xec,
		0x79, 0x1b, 0xb0, 0x45, 0x17, 0x96, 0x5b, 0x56, 0xc2, 0xf6, 0xc2, 0xb2, 0x99, 0x2d, 0x7c, 0x7d,
		0x60, 0xec, 0x07, 0x67, 0x5f, 0x58, 0x0f, 0x06, 0xef, 0xc1, 0x60, 0xee, 0x0d, 0x77, 0x3b, 0xd8,
		0x5b, 0xc2, 0xbf, 0x9e, 0xdd, 0xf5, 0x26, 0x45, 0x3f, 0x39, 0x27, 0x48, 0x16, 0x02, 0x17, 0x2e,
		0xc2, 0xae, 0xac, 0xf1, 0xff, 0x1c, 0xda, 0x7e, 0x4e, 0xb5, 0xdd, 0x27, 0xc9, 0x3b, 0x26, 0x15,
		0x61, 0x39, 0x64, 0xdc, 0x84, 0x14, 0x7d, 0x21, 0x6a, 0xa9, 0x17, 0x32, 0x9d, 0x9e, 0x17, 0x7f,
		0x2c, 0xbb, 0xd4, 0x4a, 0x5a, 0xfd, 0x3f, 0xa3, 0xb1, 0x9d, 0xd4, 0xcc, 0x25, 0x66, 0x21, 0xad,
		0xc2, 0x78, 0xa8, 0xd4, 0xd3, 0xfa, 0xa8, 0x34, 0xd8, 0x9e, 0x60, 0x7b, 0x82, 0xed, 0x19, 0xb9,
		0xed, 0xf9, 0xda, 0xd8, 0x9e, 0xdf, 0xe6, 0x6b, 0x21, 0x90, 0xa9, 0x97, 0xaf, 0xf4, 0xe7, 0xb5,
		0x0b, 0x71, 0x73, 0xae, 0x50, 0xac, 0x4a, 0xf7, 0xf7, 0x2c, 0xe5, 0x94, 0xa9, 0x73, 0x95, 0x1e,
		0xd3, 0x56, 0x0d, 0xea, 0x7e, 0xbd, 0x66, 0x8c, 0x2b, 0x3b, 0xbf, 0x3f, 0x6f, 0x27, 0xe7, 0x4b,
		0x5c, 0x91, 0xb4, 0xdc, 0xb6, 0x73, 0x8a, 0x6a, 0x71, 0x56, 0x72, 0x04, 0xe7, 0x15, 0x3f, 0x53,
		0xbd, 0x38, 0xd7, 0x41, 0xe6, 0xb9, 0x7d, 0x94, 0x50, 0x0c, 0xa4, 0xc4, 0x7a, 0xae, 0x58, 0x09,
		0xb4, 0x77, 0x6f, 0xae, 0xdf, 0x7e, 0x2a, 0x7a, 0xfd, 0x56, 0xfe, 0x97, 0xd5, 0x8b, 0x6f, 0x1f,
		0x28, 0xbb, 0xfb, 0x76, 0xd5, 0x1a, 0xe6, 0xc5, 0x30, 0xfb, 0x69, 0xb0, 0x97, 0x79, 0x1c, 0xad,
		0x85, 0x6e, 0x1d, 0x3c, 0x55, 0x0d, 0xed, 0x02, 0xa7, 0x8b, 0x10, 0x38, 0x3d, 0xf7, 0xc0, 0xc9,
		0xda, 0x6a, 0x3b, 0x42, 0x6e, 0xcb, 0x4a, 0xff, 0xff, 0x09, 0x55, 0x4a, 0x5a, 0x92, 0x39, 0xd5,
		0xf2, 0xca, 0x76, 0x81, 0x89, 0x08, 0x0a, 0x75, 0x5c, 0x26, 0xa2, 0x00, 0x9a, 0x27, 0x17, 0xd1,
		0xee, 0x24, 0x44, 0x04, 0x21, 0x22, 0x08, 0x11, 0x41, 0x60, 0x23, 0x26, 0xd6, 0x36, 0xc8, 0x87,
		0x8f, 0x68, 0xba, 0x08, 0xf6, 0x27, 0xd8, 0x9f, 0x60, 0x7f, 0x4e, 0x94, 0x91, 0x68, 0x39, 0x12,
		0x81, 0x93, 0x30, 0xe4, 0x24, 0xac, 0x42, 0x05, 0x27, 0x3a, 0xa2, 0xb4, 0x1c, 0x4f, 0x19, 0x36,
		0xad, 0xd3, 0x94, 0x0b, 0x45, 0xd9, 0xed, 0x99, 0x51, 0x29, 0x40, 0xf7, 0x79, 0xb0, 0xd3, 0x41,
		0x08, 0xa4, 0x42, 0x20, 0x75, 0xdc, 0x40, 0x2a, 0x27, 0x24, 0xb4, 0xb5, 0x76, 0xf6, 0x61, 0xea,
		0x1e, 0x82, 0x0b, 0x13, 0x5c, 0x98, 0xe0, 0xc2, 0x8c, 0xcb, 0x85, 0xc9, 0x5d, 0x97, 0xfa, 0xf9,
		0x5b, 0xbf, 0xfe, 0xda, 0xbc, 0xec, 0x38, 0x33, 0xd5, 0x75, 0x81, 0x8b, 0x9b, 0xe2, 0x51, 0x5d,
		0x91, 0x96, 0x23, 0x88, 0xb9, 0x5a, 0x93, 0x73, 0xb7, 0x58, 0xed, 0x4e, 0x82, 0xd1, 0x0a, 0x46,
		0x2b, 0x18, 0xad, 0xf1, 0xc6, 0x5d, 0x2d, 0x8f, 0xb8, 0x8e, 0x27, 0x1a, 0xdb, 0xa5, 0x97, 0x7b,
		0x12, 0x71, 0xd5, 0x7b, 0xdc, 0xec, 0x58, 0x1e, 0xb0, 0xf4, 0x9b, 0xa2, 0x0f, 0x54, 0xaa, 0xd7,
		0x4a, 0x59, 0xfa, 0x77, 0x1f, 0x29, 0x7b, 0x93, 0xa0, 0x86, 0xbd, 0x8c, 0x2e, 0x81, 0xad, 0x93,
		0xc4, 0xc2, 0xda, 0x7e, 0x24, 0x3f, 0xdc, 0x1b, 0x7f, 0x16, 0x31, 0x0a, 0x8c, 0x7f, 0xdf, 0x94,
		0x4d, 0x4f, 0x35, 0x4e, 0x75, 0x0a, 0xc9, 0xdc, 0x02, 0xd6, 0x7a, 0x28, 0xfd, 0x76, 0xb0, 0xc0,
		0xd5, 0xab, 0x8c, 0xb9, 0x04, 0xae, 0x59, 0xde, 0xd2, 0x0e, 0xa3, 0x4e, 0xd8, 0x74, 0xc2, 0xa4,
		0x1d, 0x16, 0xfb, 0xb6, 0xc4, 0x12, 0x7b, 0xf6, 0x98, 0x33, 0x29, 0xb7, 0xb7, 0xc4, 0xd6, 0xe3,
		0x60, 0x3a, 0x0c, 0x91, 0x47, 0xf6, 0x22, 0x6a, 0x1c, 0x48, 0xf3, 0x33, 0x0f, 0xad, 0x36, 0x66,
		0x27, 0x1f, 0x2e, 0x7e, 0xea, 0xc9, 0x87, 0xec, 0x17, 0x3c, 0xf9, 0x90, 0x1d, 0xfb, 0xe4, 0x83,
		0xb1, 0x27, 0x63, 0x8f, 0x0a, 0x30, 0x2f, 0x88, 0xf0, 0xc3, 0xb4, 0xda, 0xa4, 0x28, 0xed, 0x61,
		0x5d, 0x34, 0x3b, 0x85, 0x33, 0x3d, 0x01, 0xd9, 0x63, 0xb3, 0xfc, 0x36, 0x18, 0xb2, 0x7d, 0x04,
		0x94, 0xff, 0xaf, 0xf3, 0xae, 0x8f, 0xa1, 0x36, 0x26, 0x75, 0x18, 0x0d, 0xf8, 0xfa, 0x0b, 0x2e,
		0x82, 0x92, 0x9c, 0xac, 0x92, 0x18, 0x1f, 0x7c, 0xab, 0x52, 0xf9, 0xd6, 0x59, 0x92, 0xaa, 0xe1,
		0xaf, 0x50, 0xb7, 0x99, 0x3d, 0xc3, 0xec, 0x48, 0x76, 0x7a, 0x75, 0x9b, 0x76, 0x90, 0x83, 0x9f,
		0x56, 0xb7, 0xd9, 0x62, 0x4b, 0x6c, 0x4a, 0xe3, 0xf6, 0x25, 0x20, 0x2d, 0xca, 0xe2, 0xc6, 0x9d,
		0x80, 0x0c, 0x2a, 0xf6, 0x84, 0x2a, 0x66, 0x9d, 0x80, 0x0c, 0x8c, 0x3e, 0x1c, 0x17, 0xd2, 0xcf,
		0x85, 0xd1, 0xcf, 0x02, 0xa3, 0x1f, 0x18, 0xfd, 0x81, 0xe4, 0x57, 0x3c, 0xef, 0xfd, 0x4c, 0x52,
		0xd5, 0x43, 0xb0, 0x47, 0xc1, 0x1e, 0x05, 0x7b, 0x74, 0x12, 0x65, 0x11, 0x4f, 0x59, 0x68, 0x7e,
		0xec, 0xf4, 0xa2, 0xa5, 0xfd, 0x09, 0xe9, 0x45, 0x0f, 0xa2, 0xcf, 0x91, 0xf0, 0xd3, 0x48, 0x73,
		0x0b, 0xb8, 0xac, 0xf9, 0x3f, 0x1e, 0x63, 0x2b, 0xbd, 0xa8, 0xdf, 0x3e, 0x65, 0x5d, 0x6c, 0xa7,
		0x24, 0xda, 0x3e, 0x30, 0xed, 0x76, 0x11, 0x6a, 0x63, 0x4f, 0x33, 0x34, 0x3d, 0xa1, 0x43, 0x86,
		0x8d, 0x6e, 0xba, 0x23, 0xf8, 0x31, 0x8a, 0xc5, 0x15, 0xd4, 0x8e, 0xe0, 0x1e, 0x89, 0xb3, 0x18,
		0xca, 0xd1, 0x60, 0xfc, 0xe5, 0x68, 0xb6, 0xca, 0x32, 0x08, 0x9f, 0x33, 0x20, 0xaf, 0xe3, 0x19,
		0x4f, 0x79, 0xab, 0xca, 0x10, 0x2a, 0x33, 0x8c, 0xea, 0x0c, 0xa5, 0x42, 0x83, 0xab, 0xd2, 0xe0,
		0x2a, 0x35, 0x98, 0x6a, 0xb9, 0xa9, 0x98, 0xa3, 0xaa, 0xf9, 0xc7, 0x67, 0x03, 0xc6, 0x69, 0x43,
		0xc4, 0x6b, 0xc3, 0xc7, 0x6d, 0xc6, 0x7c, 0x52, 0x15, 0xbb, 0xb9, 0x92, 0x49, 0xee, 0x82, 0x77,
		0x10, 0xba, 0x3b, 0xc9, 0x34, 0x14, 0xd9, 0x14, 0x8c, 0x64, 0x30, 0x92, 0xc1, 0x48, 0x3e, 0x57,
		0x23, 0x59, 0xd9, 0x8c, 0x11, 0x5b, 0x48, 0x95, 0x0e, 0x63, 0x1f, 0xcb, 0x7e, 0x82, 0x75, 0x0c,
		0xd6, 0x31, 0x58, 0xc7, 0x60, 0x1d, 0x87, 0x38, 0x19, 0xd9, 0xf7, 0x9d, 0x10, 0x95, 0x79, 0x1d,
		0xe8, 0x0b, 0x21, 0x3c, 0xec, 0xee, 0x51, 0x79, 0x82, 0x47, 0x32, 0x0f, 0xe0, 0x64, 0x75, 0xdd,
		0x12, 0x11, 0x75, 0x6b, 0x9f, 0x84, 0x44, 0xd3, 0x89, 0x47, 0x62, 0xa2, 0x81, 0xae, 0x4b, 0x82,
		0xc2, 0x55, 0x0c, 0x8e, 0x09, 0x8b, 0x86, 0xea, 0xb4, 0x4e, 0x5c, 0x74, 0x51, 0x3d, 0x20, 0xb1,
		0x09, 0x2e, 0xf9, 0x8d, 0xeb, 0x66, 0xd0, 0x2f, 0x7a, 0xcc, 0x56, 0xc2, 0x63, 0xf7, 0xa3, 0x31,
		0x94, 0x18, 0x14, 0x46, 0xc0, 0x99, 0x46, 0x2e, 0x9a, 0x87, 0xe3, 0xcb, 0x81, 0x2f, 0x1e, 0xc5,
		0x73, 0xc0, 0xbf, 0xb8, 0xc0, 0x05, 0xd0, 0x60, 0x5f, 0x68, 0xeb, 0xa0, 0xd4, 0xc7, 0x48, 0xd5,
		0xdb, 0xac, 0x36, 0xe4, 0xe6, 0x07, 0x78, 0xd4, 0x0d, 0xf1, 0x88, 0x3b, 0x66, 0x76, 0xde, 0xed,
		0x11, 0xf5, 0x44, 0xc7, 0x7f, 0xcd, 0xca, 0xdf, 0x9f, 0xc9, 0xf1, 0xdf, 0xf5, 0xad, 0x1e, 0x1e,
		0xb5, 0xcd, 0xf9, 0xda, 0x3b, 0xb6, 0x65, 0x99, 0x43, 0x4f, 0x61, 0x92, 0xa9, 0xc1, 0xb8, 0x42,
		0x39, 0x17, 0x34, 0x2d, 0x95, 0xa4, 0x9a, 0xb2, 0x84, 0x16, 0xa2, 0x21, 0x47, 0xb4, 0x04, 0xb5,
		0x24, 0xaa, 0xbe, 0x8e, 0xf9, 0xb7, 0x12, 0xc8, 0xe9, 0x8c, 0x5d, 0x77, 0xef, 0x9c, 0x13, 0x06,
		0xeb, 0x44, 0xd1, 0x15, 0x51, 0x98, 0x6c, 0xe0, 0x3b, 0xc2, 0x8a, 0xa4, 0x29, 0xc6, 0xa0, 0x38,
		0x50, 0xa6, 0x50, 0x2c, 0xc8, 0x1c, 0xe5, 0x34, 0x14, 0x66, 0x3c, 0x95, 0x8f, 0xf1, 0x6c, 0x0b,
		0x33, 0x06, 0xac, 0xc6, 0xf0, 0x2e, 0xc1, 0xd8, 0x55, 0xb5, 0xae, 0x8e, 0xe5, 0x8a, 0xd3, 0x68,
		0x18, 0xc9, 0x75, 0x6c, 0x3a, 0x63, 0x57, 0x98, 0x22, 0x8b, 0x29, 0xbb, 0x05, 0xce, 0x40, 0x2d,
		0x11, 0xd4, 0x26, 0x45, 0xe0, 0x0b, 0xa8, 0x7e, 0xc7, 0x73, 0x02, 0xa4, 0xdb, 0xdb, 0x8c, 0xcd,
		0xf9, 0x3a, 0x89, 0x27, 0xb0, 0xe0, 0x02, 0xf0, 0x07, 0x59, 0xa5, 0x09, 0x4e, 0x40, 0xe0, 0x02,
		0x85, 0x56, 0x44, 0x02, 0x3a, 0xe4, 0x01, 0x2e, 0x80, 0xb0, 0x46, 0x2b, 0xa7, 0xa1, 0xb0, 0x24,
		0x04, 0x0a, 0xa3, 0x22, 0x8c, 0x9c, 0xc2, 0xd7, 0x40, 0x0d, 0x1d, 0x23, 0x70, 0xf1, 0x74, 0x21,
		0x6f, 0x7e, 0xea, 0xa1, 0x79, 0x33, 0xa7, 0xc8, 0xd6, 0x1b, 0x3f, 0xc6, 0x19, 0xf9, 0xee, 0xb9,
		0x17, 0xf3, 0x13, 0xf3, 0x7b, 0xda, 0x86, 0xf3, 0xf3, 0xcf, 0xfe, 0xfc, 0xbc, 0x43, 0xa5, 0x9d,
		0x47, 0x65, 0x5d, 0x38, 0x47, 0x1f, 0x0e, 0xf9, 0xba, 0x92, 0x7d, 0x1e, 0x69, 0x45, 0x97, 0x34,
		0xa2, 0x7f, 0xda, 0xd0, 0xe8, 0xa4, 0x50, 0xf3, 0xad, 0x45, 0xa3, 0xe2, 0x6a, 0x8c, 0x35, 0x3b,
		0x7c, 0x5d, 0x9b, 0xb7, 0xff, 0x61, 0xfd, 0x60, 0xb6, 0xf5, 0x46, 0x5a, 0x87, 0x76, 0xca, 0xfe,
		0x5d, 0x5d, 0x13, 0xab, 0x9f, 0xba, 0xdf, 0xc1, 0xd2, 0x41, 0x57, 0xdd, 0x0c, 0x42, 0x56, 0xd0,
		0xb1, 0x82, 0x8c, 0x19, 0x54, 0x0e, 0xad, 0xd2, 0x8c, 0xca, 0x33, 0xf4, 0xd1, 0x0e, 0x58, 0x8a,
		0x3e, 0x1d, 0xdc, 0xe5, 0x0f, 0xe2, 0xb8, 0xe0, 0xe0, 0x74, 0x30, 0xaf, 0x96, 0x08, 0x65, 0x37,
		0x10, 0x13, 0x45, 0x60, 0xc5, 0x63, 0x4c, 0xa6, 0x27, 0xe1, 0xfb, 0xa9, 0x5f, 0xd0, 0xf7, 0x53,
		0xa3, 0xf1, 0xfd, 0xdc, 0x7e, 0x5e, 0xc2, 0xe6, 0x37, 0x25, 0x3a, 0xbc, 0x56, 0x05, 0x44, 0xdd,
		0x09, 0xcc, 0x39, 0x63, 0x38, 0x57, 0x12, 0x08, 0x24, 0x7c, 0x4e, 0x12, 0x78, 0x59, 0xfc, 0x9e,
		0xc7, 0xab, 0xbc, 0xfa, 0x03, 0x08, 0x8b, 0x67, 0x8c, 0x80, 0xc0, 0x15, 0x57, 0x08, 0x2f, 0x5b,
		0xbf, 0x3f, 0x5a, 0xde, 0x70, 0x4f, 0x09, 0x10, 0x90, 0xa8, 0x72, 0xbe, 0x6b, 0x89, 0x20, 0x50,
		0xa6, 0x38, 0x57, 0xf4, 0x1e, 0x67, 0x4c, 0xdf, 0xf1, 0x9f, 0x7d, 0x64, 0xf5, 0x14, 0xe0, 0x9d,
		0x02, 0x2a, 0x21, 0xe5, 0x52, 0xd2, 0xef, 0x09, 0x6a, 0x25, 0x59, 0x92, 0x7b, 0x04, 0x89, 0xf7,
		0x28, 0x48, 0x32, 0x63, 0x85, 0xee, 0x7c, 0x47, 0x95, 0x21, 0x16, 0xac, 0x9a, 0x24, 0x2b, 0x84,
		0x62, 0x76, 0x7a, 0x5e, 0xd0, 0x9a, 0x4c, 0x3e, 0x17, 0x39, 0x9d, 0xb1, 0x0f, 0xf4, 0x0e, 0x33,
		0x2a, 0x71, 0x52, 0xb2, 0x73, 0x90, 0x73, 0x6c, 0x90, 0x72, 0x85, 0x4c, 0x51, 0x92, 0x14, 0x74,
		0xb7, 0xc0, 0xb3, 0x25, 0x5f, 0x61, 0x5c, 0x75, 0x3f, 0x63, 0x7b, 0xa7, 0x78, 0xbd, 0x44, 0x81,
		0x0b, 0x2e, 0x70, 0x02, 0x94, 0x01, 0xd7, 0x06, 0x4a, 0xcf, 0x13, 0x99, 0x5c, 0x0b, 0x2c, 0xf8,
		0xf6, 0x0c, 0x67, 0x2c, 0xcb, 0x87, 0x20, 0x49, 0x46, 0x36, 0x12, 0xee, 0x18, 0xcf, 0xf4, 0x4d,
		0x31, 0xd5, 0x93, 0xbb, 0x5d, 0x53, 0xb9, 0xac, 0x17, 0x91, 0x2f, 0x69, 0x02, 0x7a, 0x85, 0x9b,
		0xfc, 0xcd, 0x8c, 0x51, 0x09, 0x34, 0xd6, 0x53, 0x5b, 0x50, 0x3d, 0x9d, 0x0d, 0x10, 0x88, 0x31,
		0xa6, 0x73, 0xa2, 0xb0, 0x30, 0x1f, 0xcd, 0xc7, 0x62, 0x0a, 0xf0, 0x49, 0x4b, 0x21, 0x1f, 0x98,
		0x14, 0x3b, 0x54, 0x18, 0x12, 0x99, 0xb3, 0x85, 0x94, 0xa9, 0x33, 0xc5, 0x0b, 0xf2, 0x33, 0x6f,
		0x3b, 0x01, 0xc6, 0x15, 0x10, 0x58, 0xad, 0x13, 0x45, 0x9b, 0xcb, 0x81, 0xd8, 0x0f, 0xc4, 0xbe,
		0x65, 0x9c, 0x60, 0xf5, 0xe5, 0xc1, 0x7e, 0x2c, 0xdf, 0xc9, 0x65, 0xbb, 0x7d, 0x9f, 0x24, 0x96,
		0x8e, 0xde, 0xcd, 0x21, 0x17, 0xc8, 0xcc, 0x3b, 0xb6, 0xf2, 0x8a, 0xa3, 0xc7, 0x58, 0x30, 0x63,
		0xd7, 0x77, 0x3f, 0x68, 0xbb, 0xab, 0xdb, 0xbe, 0xb2, 0x03, 0xcd, 0xbe, 0xf5, 0x19, 0xad, 0x6b,
		0xcf, 0x7a, 0x0c, 0xd6, 0xb1, 0x3d, 0xff, 0x66, 0x96, 0xc5, 0xab, 0x72, 0x9e, 0x87, 0xe6, 0x17,
		0x51, 0xf9, 0x96, 0xdc, 0xe1, 0x5f, 0x9c, 0x77, 0x0d, 0xc0, 0xee, 0x9c, 0xa3, 0xf6, 0x47, 0x5b,
		0xd3, 0xba, 0x2e, 0x13, 0x49, 0xc5, 0x54, 0x1e, 0x5e, 0x3c, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x46, 0x48, 0x59, 0x31, 0x8e, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{}
